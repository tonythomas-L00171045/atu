AWSTemplateFormatVersion: "2010-09-09"
Description: Template for creating ec2 instance, security group. Will have 2 set of Ingress and a max of three Egress(es)

Parameters:
  VPCId:
    Description: Name of the variable for VPC Id from Output
    Type: String
  GatewayId:
    Description: Name of variable for Gateway Id from Output
    Type: String

  SubnetId:
    Description: Name of variable for Subnet Id for the instance
    Type: String
  ImageId:
    Description: ami Image Id
    Type: String
  InstanceName:
    Description: Name of the instance
    Type: String
  SecurityGroupName:
    Description: Name of the Security Group
    Type: String
  InstanceKeyName:
    Description: Name of the parameter store variable containing keypair name
    Type: String
  Environment:
    Description: Whether Dev, Test or Prod
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Test
      - Prod

  SecurityGroupEgressProtocol1:
    Description: Egress 1 IP protocol
    Type: String
    AllowedValues:
      - icmp
      - tcp    
  SecurityGroupEgressIP1:
    Description: Egress 1 IP range
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 0.0.0.0/0
  SecurityGroupEgressPort1:
    Description: Egress 1 From/To ports
    Type: Number

  SecurityGroupEgressProtocol2:
    Description: Egress 2 IP protocol
    Type: String
    AllowedValues:
      - icmp
      - tcp
    Default: icmp
  SecurityGroupEgressIP2:
    Description: Egress 2 IP range
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 0.0.0.0/0
  SecurityGroupEgressPort2:
    Description: Egress 2 From/To ports
    Type: Number
    Default: 0

  SecurityGroupEgressProtocol3:
    Description: Egress 3 IP protocol
    Type: String
    AllowedValues:
      - icmp
      - tcp
    Default: icmp
  SecurityGroupEgressIP3:
    Description: Egress 3 IP range
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 0.0.0.0/0
  SecurityGroupEgressPort3:
    Description: Egress 3 From/To ports
    Type: Number
    Default: 0

  SecurityGroupIngressProtocol1:
    Description: Ingress 1 IP protocol
    Type: String
    AllowedValues:
      - icmp
      - tcp    
  SecurityGroupIngressIP1:
    Description: Ingress 1 IP range
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 0.0.0.0/0
  SecurityGroupIngressPort1:
    Description: Ingress 1 From/To ports
    Type: Number

  SecurityGroupIngressProtocol2:
    Description: Ingress 2 IP protocol
    Type: String
    AllowedValues:
      - icmp
      - tcp    
  SecurityGroupIngressIP2:
    Description: Ingress 2 IP range
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 0.0.0.0/0
  SecurityGroupIngressPort2:
    Description: Ingress 2 From/To ports
    Type: Number  

Conditions:
  HasDefaultEgress2: !Equals
    - !Ref SecurityGroupEgressPort2
    - 0
  CreateEgress2: !Not
    - Condition: HasDefaultEgress2

  HasDefaultEgress3: !Equals
    - !Ref SecurityGroupEgressPort3
    - 0
  CreateEgress3: !Not
    - Condition: HasDefaultEgress3

Mappings: 
  EnvironmentInstancePropMap: 
    Dev: 
      "InstanceType": "t2.micro"
    Test: 
      "InstanceType": "t2.small"
    Prod: 
      "InstanceType": "t2.large"
    
Resources:
  # an EC2 instance depending on the below security group
  ec2Instance:
    Type: AWS::EC2::Instance
    DependsOn: ["securityGroup"]
    Properties:
      InstanceType: !FindInMap [EnvironmentInstancePropMap, !Ref Environment, InstanceType]
      ImageId: !Ref ImageId
      KeyName: !Ref InstanceKeyName
      SecurityGroupIds: [!Ref securityGroup]
      SubnetId: 
        Fn::ImportValue: !Ref SubnetId
      Tags:
        - Key: "Name"
          Value: !Ref InstanceName
        - Key: "Project"
          Value: "atudevopsdemo"  
  
  securityGroup:
    # security group for the above ec2 instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      VpcId:
        Fn::ImportValue: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: !Ref SecurityGroupIngressProtocol1
          FromPort: !Ref SecurityGroupIngressPort1
          ToPort: !Ref SecurityGroupIngressPort1
          CidrIp: !Ref SecurityGroupIngressIP1
        - IpProtocol: !Ref SecurityGroupIngressProtocol2
          FromPort: !Ref SecurityGroupIngressPort2
          ToPort: !Ref SecurityGroupIngressPort2
          CidrIp: !Ref SecurityGroupIngressIP2

      SecurityGroupEgress:
        - IpProtocol: !Ref SecurityGroupEgressProtocol1
          FromPort: !Ref SecurityGroupEgressPort1
          ToPort: !Ref SecurityGroupEgressPort1
          CidrIp: !Ref SecurityGroupEgressIP1

        - !If
          - CreateEgress2
          - IpProtocol: !Ref SecurityGroupEgressProtocol2
            FromPort: !Ref SecurityGroupEgressPort2
            ToPort: !Ref SecurityGroupEgressPort2
            CidrIp: !Ref SecurityGroupEgressIP2
          - !Ref AWS::NoValue

        - !If
          - CreateEgress3
          - IpProtocol: !Ref SecurityGroupEgressProtocol3
            FromPort: !Ref SecurityGroupEgressPort3
            ToPort: !Ref SecurityGroupEgressPort3
            CidrIp: !Ref SecurityGroupEgressIP3
          - !Ref AWS::NoValue       
          
      Tags:
       - Key: "Project"
         Value: atudevopsdemo1
       - Key: "Name"
         Value: !Ref SecurityGroupName